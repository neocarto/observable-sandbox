/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/@turf/helpers@6.5.0/dist/es/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var r=6371008.8,e={centimeters:637100880,centimetres:637100880,degrees:57.22891354143274,feet:20902260.511392,inches:39.37*r,kilometers:6371.0088,kilometres:6371.0088,meters:r,metres:r,miles:3958.761333810546,millimeters:6371008800,millimetres:6371008800,nauticalmiles:r/1852,radians:1,yards:6967335.223679999},t={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/r,yards:1.0936133},n={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046};function i(r,e,t){void 0===t&&(t={});var n={type:"Feature"};return(0===t.id||t.id)&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.properties=e||{},n.geometry=r,n}function o(r,e,t){switch(r){case"Point":return s(e).geometry;case"LineString":return l(e).geometry;case"Polygon":return a(e).geometry;case"MultiPoint":return w(e).geometry;case"MultiLineString":return d(e).geometry;case"MultiPolygon":return h(e).geometry;default:throw new Error(r+" is invalid")}}function s(r,e,t){if(void 0===t&&(t={}),!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!A(r[0])||!A(r[1]))throw new Error("coordinates must contain numbers");return i({type:"Point",coordinates:r},e,t)}function u(r,e,t){return void 0===t&&(t={}),f(r.map((function(r){return s(r,e)})),t)}function a(r,e,t){void 0===t&&(t={});for(var n=0,o=r;n<o.length;n++){var s=o[n];if(s.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var u=0;u<s[s.length-1].length;u++)if(s[s.length-1][u]!==s[0][u])throw new Error("First and last Position are not equivalent.")}return i({type:"Polygon",coordinates:r},e,t)}function m(r,e,t){return void 0===t&&(t={}),f(r.map((function(r){return a(r,e)})),t)}function l(r,e,t){if(void 0===t&&(t={}),r.length<2)throw new Error("coordinates must be an array of two or more positions");return i({type:"LineString",coordinates:r},e,t)}function c(r,e,t){return void 0===t&&(t={}),f(r.map((function(r){return l(r,e)})),t)}function f(r,e){void 0===e&&(e={});var t={type:"FeatureCollection"};return e.id&&(t.id=e.id),e.bbox&&(t.bbox=e.bbox),t.features=r,t}function d(r,e,t){return void 0===t&&(t={}),i({type:"MultiLineString",coordinates:r},e,t)}function w(r,e,t){return void 0===t&&(t={}),i({type:"MultiPoint",coordinates:r},e,t)}function h(r,e,t){return void 0===t&&(t={}),i({type:"MultiPolygon",coordinates:r},e,t)}function v(r,e,t){return void 0===t&&(t={}),i({type:"GeometryCollection",geometries:r},e,t)}function b(r,e){if(void 0===e&&(e=0),e&&!(e>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,e||0);return Math.round(r*t)/t}function y(r,t){void 0===t&&(t="kilometers");var n=e[t];if(!n)throw new Error(t+" units is invalid");return r*n}function g(r,t){void 0===t&&(t="kilometers");var n=e[t];if(!n)throw new Error(t+" units is invalid");return r/n}function p(r,e){return P(g(r,e))}function E(r){var e=r%360;return e<0&&(e+=360),e}function P(r){return 180*(r%(2*Math.PI))/Math.PI}function x(r){return r%360*Math.PI/180}function k(r,e,t){if(void 0===e&&(e="kilometers"),void 0===t&&(t="kilometers"),!(r>=0))throw new Error("length must be a positive number");return y(g(r,e),t)}function M(r,e,t){if(void 0===e&&(e="meters"),void 0===t&&(t="kilometers"),!(r>=0))throw new Error("area must be a positive number");var i=n[e];if(!i)throw new Error("invalid original units");var o=n[t];if(!o)throw new Error("invalid final units");return r/i*o}function A(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}function L(r){return!!r&&r.constructor===Object}function q(r){if(!r)throw new Error("bbox is required");if(!Array.isArray(r))throw new Error("bbox must be an Array");if(4!==r.length&&6!==r.length)throw new Error("bbox must be an Array of 4 or 6 numbers");r.forEach((function(r){if(!A(r))throw new Error("bbox must only contain numbers")}))}function S(r){if(!r)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string")}export{n as areaFactors,E as bearingToAzimuth,M as convertArea,k as convertLength,x as degreesToRadians,r as earthRadius,e as factors,i as feature,f as featureCollection,o as geometry,v as geometryCollection,A as isNumber,L as isObject,p as lengthToDegrees,g as lengthToRadians,l as lineString,c as lineStrings,d as multiLineString,w as multiPoint,h as multiPolygon,s as point,u as points,a as polygon,m as polygons,P as radiansToDegrees,y as radiansToLength,b as round,t as unitsFactors,q as validateBBox,S as validateId};export default null;
