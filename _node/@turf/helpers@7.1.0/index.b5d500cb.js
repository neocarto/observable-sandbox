var o=63710088e-1,l={centimeters:o*100,centimetres:o*100,degrees:360/(2*Math.PI),feet:o*3.28084,inches:o*39.37,kilometers:o/1e3,kilometres:o/1e3,meters:o,metres:o,miles:o/1609.344,millimeters:o*1e3,millimetres:o*1e3,nauticalmiles:o/1852,radians:1,yards:o*1.0936},c={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,nauticalmiles:29155334959812285e-23,millimeters:1e6,millimetres:1e6,yards:1.195990046};function i(e,r,t={}){const n={type:"Feature"};return(t.id===0||t.id)&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.properties=r||{},n.geometry=e,n}function E(e,r,t={}){switch(e){case"Point":return m(r).geometry;case"LineString":return h(r).geometry;case"Polygon":return f(r).geometry;case"MultiPoint":return w(r).geometry;case"MultiLineString":return d(r).geometry;case"MultiPolygon":return y(r).geometry;default:throw new Error(e+" is invalid")}}function m(e,r,t={}){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!u(e[0])||!u(e[1]))throw new Error("coordinates must contain numbers");return i({type:"Point",coordinates:e},r,t)}function P(e,r,t={}){return a(e.map(n=>m(n,r)),t)}function f(e,r,t={}){for(const n of e){if(n.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");if(n[n.length-1].length!==n[0].length)throw new Error("First and last Position are not equivalent.");for(let s=0;s<n[n.length-1].length;s++)if(n[n.length-1][s]!==n[0][s])throw new Error("First and last Position are not equivalent.")}return i({type:"Polygon",coordinates:e},r,t)}function v(e,r,t={}){return a(e.map(n=>f(n,r)),t)}function h(e,r,t={}){if(e.length<2)throw new Error("coordinates must be an array of two or more positions");return i({type:"LineString",coordinates:e},r,t)}function x(e,r,t={}){return a(e.map(n=>h(n,r)),t)}function a(e,r={}){const t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function d(e,r,t={}){return i({type:"MultiLineString",coordinates:e},r,t)}function w(e,r,t={}){return i({type:"MultiPoint",coordinates:e},r,t)}function y(e,r,t={}){return i({type:"MultiPolygon",coordinates:e},r,t)}function A(e,r,t={}){return i({type:"GeometryCollection",geometries:e},r,t)}function M(e,r=0){if(r&&!(r>=0))throw new Error("precision must be a positive number");const t=Math.pow(10,r||0);return Math.round(e*t)/t}function b(e,r="kilometers"){const t=l[r];if(!t)throw new Error(r+" units is invalid");return e*t}function g(e,r="kilometers"){const t=l[r];if(!t)throw new Error(r+" units is invalid");return e/t}function k(e,r){return p(g(e,r))}function L(e){let r=e%360;return r<0&&(r+=360),r}function S(e){return e=e%360,e>0?e>180?e-360:e:e<-180?e+360:e}function p(e){return e%(2*Math.PI)*180/Math.PI}function T(e){return e%360*Math.PI/180}function q(e,r="kilometers",t="kilometers"){if(!(e>=0))throw new Error("length must be a positive number");return b(g(e,r),t)}function F(e,r="meters",t="kilometers"){if(!(e>=0))throw new Error("area must be a positive number");const n=c[r];if(!n)throw new Error("invalid original units");const s=c[t];if(!s)throw new Error("invalid final units");return e/n*s}function u(e){return!isNaN(e)&&e!==null&&!Array.isArray(e)}function I(e){return e!==null&&typeof e=="object"&&!Array.isArray(e)}function C(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(e.length!==4&&e.length!==6)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach(r=>{if(!u(r))throw new Error("bbox must only contain numbers")})}function R(e){if(!e)throw new Error("id is required");if(["string","number"].indexOf(typeof e)===-1)throw new Error("id must be a number or a string")}export{c as areaFactors,S as azimuthToBearing,L as bearingToAzimuth,F as convertArea,q as convertLength,T as degreesToRadians,o as earthRadius,l as factors,i as feature,a as featureCollection,E as geometry,A as geometryCollection,u as isNumber,I as isObject,k as lengthToDegrees,g as lengthToRadians,h as lineString,x as lineStrings,d as multiLineString,w as multiPoint,y as multiPolygon,m as point,P as points,f as polygon,v as polygons,p as radiansToDegrees,b as radiansToLength,M as round,C as validateBBox,R as validateId};
