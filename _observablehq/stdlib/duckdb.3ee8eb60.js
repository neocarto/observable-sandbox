var N=Object.defineProperty;var s=(t,a)=>N(t,"name",{value:a,configurable:!0});var u;import*as l from"../../_npm/@duckdb/duckdb-wasm@1.29.0/34eaf57e.js";var M=Object.defineProperty,o=s((t,a)=>M(t,"name",{value:a,configurable:!0}),"s"),$={platforms:{mvp:!0,eh:!0},extensions:{spatial:{install:!0,load:!0,mvp:"../../_duckdb/spatial-11ca079c",eh:"../../_duckdb/spatial-1d5f88e1"},h3:{install:!0,load:!0,mvp:"../../_duckdb/h3-6a9d49cb",eh:"../../_duckdb/h3-458fe5cb"},json:{install:!0,load:!1,mvp:"../../_duckdb/json-9e17312a",eh:"../../_duckdb/json-84958e8b"},parquet:{install:!0,load:!1,mvp:"../../_duckdb/parquet-e73e2805",eh:"../../_duckdb/parquet-e24fb295"}}};const f={mvp:{mainModule:import.meta.resolve("../../_npm/@duckdb/duckdb-wasm@1.29.0/dist/duckdb-mvp.wasm"),mainWorker:import.meta.resolve("../../_npm/@duckdb/duckdb-wasm@1.29.0/dist/duckdb-browser-mvp.worker.18a8af1f.js")},eh:{mainModule:import.meta.resolve("../../_npm/@duckdb/duckdb-wasm@1.29.0/dist/duckdb-eh.wasm"),mainWorker:import.meta.resolve("../../_npm/@duckdb/duckdb-wasm@1.29.0/dist/duckdb-browser-eh.worker.b2f0d826.js")}},k=l.selectBundle(f),j=new l.ConsoleLogger(l.LogLevel.WARNING);let d,p=[];const b=new Map;function q(t,a){a==null?(b.delete(t),d=m.of(),p=Array.from(b,e=>d.then(n=>y(n._db,...e)))):(b.set(t,a),d??=m.of(),p.push(d.then(e=>y(e._db,t,a))))}s(q,"N"),o(q,"registerTable");async function v(t,...a){return(await h()).query(t.join("?"),a)}s(v,"R"),o(v,"sql");async function h(){return await Promise.all(p),await(d??=m.of())}s(h,"T"),o(h,"getDefaultClient");const g=(u=class{constructor(a){Object.defineProperties(this,{_db:{value:a}})}async queryStream(a,e){const n=await this._db.connect();let r,i;try{if(e?.length>0?r=await(await n.prepare(a)).send(...e):r=await n.send(a),i=await r.next(),i.done)throw new Error("missing first batch")}catch(c){throw await n.close(),c}return{schema:i.value.schema,async*readRows(){try{for(;!i.done;)yield i.value.toArray(),i=await r.next()}finally{await n.close()}}}}async query(a,e){const n=await this._db.connect();let r;try{e?.length>0?r=await(await n.prepare(a)).query(...e):r=await n.query(a)}finally{await n.close()}return r}async queryRow(a,e){const n=(await this.queryStream(a,e)).readRows();try{const{done:r,value:i}=await n.next();return r||!i.length?null:i[0]}finally{await n.return()}}async sql(a,...e){return await this.query(a.join("?"),e)}queryTag(a,...e){return[a.join("?"),e]}escape(a){return`"${a}"`}async describeTables(){return Array.from(await this.query("SHOW TABLES"),({name:a})=>({name:a}))}async describeColumns({table:a}={}){return Array.from(await this.query(`DESCRIBE ${this.escape(a)}`),({column_name:e,column_type:n,null:r})=>({name:e,type:B(n),nullable:r!=="NO",databaseType:n}))}static async of(a={},e={}){const n=await S();return e.query?.castTimestampToDate===void 0&&(e={...e,query:{...e.query,castTimestampToDate:!0}}),e.query?.castBigIntToDouble===void 0&&(e={...e,query:{...e.query,castBigIntToDouble:!0}}),await n.open(e),await I(n,e.extensions),await Promise.all(Object.entries(a).map(([r,i])=>y(n,r,i))),new u(n)}static sql(){return this.of.apply(this,arguments).then(a=>a.sql.bind(a))}},s(u,"d"),u);o(g,"DuckDBClient");let m=g;Object.defineProperty(m.prototype,"dialect",{value:"duckdb"});async function I(t,a){const{mainModule:e}=await k,n=Object.keys(f).find(i=>e===f[i].mainModule),r=await t.connect();try{await Promise.all(Object.entries($.extensions).map(([i,{load:c,[n]:_}])=>r.query(`INSTALL "${i}" FROM '${import.meta.resolve(_)}'`).then(()=>(a===void 0?c:a.includes(i))&&r.query(`LOAD "${i}"`))))}finally{await r.close()}}s(I,"B"),o(I,"registerExtensions");async function y(t,a,e){if(e=await e,C(e))return A(t,a,e);if(E(e))return w(t,a,e);if(Array.isArray(e))return T(t,a,e);if(O(e))return R(t,a,e);if(typeof e=="string")return L(t,a,e);if(e&&typeof e=="object"){if("data"in e){const{data:n,...r}=e;return E(n)?w(t,a,n,r):T(t,a,n,r)}if("file"in e){const{file:n,...r}=e;return A(t,a,n,r)}}throw new Error(`invalid source: ${e}`)}s(y,"b"),o(y,"insertSource");async function L(t,a,e){const n=await t.connect();try{await n.query(`CREATE VIEW '${a}' AS FROM '${e}'`)}finally{await n.close()}}s(L,"M"),o(L,"insertUrl");async function A(t,a,e,n){const r=await e.url();if(r.startsWith("blob:")){const c=await e.arrayBuffer();await t.registerFileBuffer(e.name,new Uint8Array(c))}else await t.registerFileURL(e.name,new URL(r,location).href,4);const i=await t.connect();try{switch(e.mimeType){case"text/csv":case"text/tab-separated-values":return await i.insertCSVFromPath(e.name,{name:a,schema:"main",...n}).catch(async c=>{if(c.toString().includes("Could not convert"))return await D(i,e,a);throw c});case"application/json":return await i.insertJSONFromPath(e.name,{name:a,schema:"main",...n});default:if(/\.arrow$/i.test(e.name)){const c=new Uint8Array(await e.arrayBuffer());return await i.insertArrowFromIPCStream(c,{name:a,schema:"main",...n})}if(/\.parquet$/i.test(e.name)){const c=e.size<5e7?"TABLE":"VIEW";return await i.query(`CREATE ${c} '${a}' AS SELECT * FROM parquet_scan('${e.name}')`)}if(/\.(db|ddb|duckdb)$/i.test(e.name))return await i.query(`ATTACH '${e.name}' AS ${a} (READ_ONLY)`);throw new Error(`unknown file type: ${e.mimeType}`)}}finally{await i.close()}}s(A,"h"),o(A,"insertFile");async function D(t,a,e){return await(await t.prepare(`CREATE TABLE '${e}' AS SELECT * FROM read_csv_auto(?, ALL_VARCHAR=TRUE)`)).send(a.name)}s(D,"C"),o(D,"insertUntypedCSV");async function w(t,a,e,n){const r=await t.connect();try{await r.insertArrowTable(e,{name:a,schema:"main",...n})}finally{await r.close()}}s(w,"y"),o(w,"insertArrowTable");async function R(t,a,e){const n=(await import("../../_npm/apache-arrow@18.0.0/a639cc2a.js")).tableFromIPC(e.toArrowBuffer());return await w(t,a,n)}s(R,"D"),o(R,"insertArqueroTable");async function T(t,a,e,n){const r=(await import("../../_npm/apache-arrow@18.0.0/a639cc2a.js")).tableFromJSON(e);return await w(t,a,r,n)}s(T,"E"),o(T,"insertArray");async function S(){const{mainWorker:t,mainModule:a}=await k,e=await l.createWorker(t),n=new l.AsyncDuckDB(j,e);return await n.instantiate(a),n}s(S,"O"),o(S,"createDuckDB");function B(t){switch(t){case"BIGINT":case"HUGEINT":case"UBIGINT":return"bigint";case"DOUBLE":case"REAL":case"FLOAT":return"number";case"INTEGER":case"SMALLINT":case"TINYINT":case"USMALLINT":case"UINTEGER":case"UTINYINT":return"integer";case"BOOLEAN":return"boolean";case"DATE":case"TIMESTAMP":case"TIMESTAMP WITH TIME ZONE":return"date";case"VARCHAR":case"UUID":return"string";default:return/^DECIMAL\(/.test(t)?"integer":"other"}}s(B,"g"),o(B,"getDuckDBType");function C(t){return t&&typeof t.name=="string"&&typeof t.url=="function"&&typeof t.arrayBuffer=="function"}s(C,"U"),o(C,"isFileAttachment");function O(t){return t&&typeof t.toArrowBuffer=="function"}s(O,"$"),o(O,"isArqueroTable");function E(t){return t&&typeof t.getChild=="function"&&typeof t.toArray=="function"&&t.schema&&Array.isArray(t.schema.fields)}s(E,"I"),o(E,"isArrowTable");export{m as DuckDBClient,h as getDefaultClient,q as registerTable,v as sql};
